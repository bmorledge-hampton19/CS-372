import java.util.Random;

/**
 * A class that represents a person by their name, age, and phone number.
 * @author Benjamin Morledge-Hampton
 * @version 1.0 1/5/2017
 */
public class Person {

	// The three indentifiers for the Person
	private String name;
	private int age;
	private int phoneNumber;
	
	// The random number generator
	Random rng = new Random();
	
	// An array that keeps track of what phoneNumbers are in use.
	private static int[] usedPhoneNumbers;
	// Keeps track of how many people have been created so that integers can be added to the above array more easily.
	private static int numberOfPeople = 0;
	
	
	/**
	 * The default constructor which creates a person named Bob with a random age and phone number
	 */
	Person() {
		
		// Set the name to "Bob"
		name = "Bob";
		
		// Create a random phone number and age.
		age = rng.nextInt(80) + 21;
		phoneNumber = rng.nextInt(9000000) + 1000000;
		
		// Check to make sure the phone number is valid, generating new numbers if necessary until it is.
		while (isNumberInUse(phoneNumber)) phoneNumber = rng.nextInt(9000000) + 1000000;
		
		// Finally, add the new phone number to the list of existing numbers and increment the number of people.
		usedPhoneNumbers[numberOfPeople] = phoneNumber;
		numberOfPeople++;
		
	}
	
	/**
	 * A constructor which takes a phone number, name, and age and creates a person based on those parameters.
	 * @param phoneNumber specifies the phone number for the new person
	 * @param name specifies the name for the new person
	 * @param age specifies the age for the new person.
	 * @throws inUseException if the given number is already in use.
	 * @throws phoneNumberOutOfBoundsException if the given number is too large or too small.
	 * @throws ageOutOfBoundsException if the given age is lower than 20, or greater than 100
	 */
	Person (int phoneNumber, String name, int age) {
		
		// Set
		this.name = name;
		
		
	}
	
	
	/**
	 * A function which checks to make sure that the given phone number is not in use.
	 * @param number specifies the phone number to be checked.
	 * @return returns true if the number is in use, otherwise returns false.
	 */
	private boolean isNumberInUse(int number) {
		
		// Loop through the array of used phone numbers looking for matches
		for (int n : usedPhoneNumbers) {
			if (number == n) return true;
		}
		
		return false;
		
	}
	
}
